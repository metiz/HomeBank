//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HomeBankModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class HBContext : DbContext
    {
        public HBContext()
            : base("name=HBContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Account> Accounts { get; set; }
        public DbSet<Category> Categories { get; set; }
        public DbSet<Transaction> Transactions { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<Bank> Banks { get; set; }
        public DbSet<Transfer> Transfers { get; set; }
    
        public virtual int AddNewAccount(string name, Nullable<decimal> balance, Nullable<int> creditInstID, Nullable<System.DateTime> date)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            var creditInstIDParameter = creditInstID.HasValue ?
                new ObjectParameter("CreditInstID", creditInstID) :
                new ObjectParameter("CreditInstID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewAccount", nameParameter, balanceParameter, creditInstIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> AddNewCategory(string name, Nullable<int> userID, Nullable<bool> type, Nullable<int> belongsTo)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(bool));
    
            var belongsToParameter = belongsTo.HasValue ?
                new ObjectParameter("BelongsTo", belongsTo) :
                new ObjectParameter("BelongsTo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddNewCategory", nameParameter, userIDParameter, typeParameter, belongsToParameter);
        }
    
        public virtual int AddNewExpence(Nullable<int> accoutnID, string name, Nullable<decimal> amount, Nullable<int> categoryID, Nullable<System.DateTime> date)
        {
            var accoutnIDParameter = accoutnID.HasValue ?
                new ObjectParameter("AccoutnID", accoutnID) :
                new ObjectParameter("AccoutnID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewExpence", accoutnIDParameter, nameParameter, amountParameter, categoryIDParameter, dateParameter);
        }
    
        public virtual int AddNewIncome(Nullable<int> accoutnID, string name, Nullable<decimal> amount, Nullable<int> categoryID, Nullable<System.DateTime> date)
        {
            var accoutnIDParameter = accoutnID.HasValue ?
                new ObjectParameter("AccoutnID", accoutnID) :
                new ObjectParameter("AccoutnID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewIncome", accoutnIDParameter, nameParameter, amountParameter, categoryIDParameter, dateParameter);
        }
    
        public virtual int AddNewTrans(Nullable<int> accoutnID, string name, Nullable<decimal> amount, Nullable<int> categoryID, Nullable<System.DateTime> date)
        {
            var accoutnIDParameter = accoutnID.HasValue ?
                new ObjectParameter("AccoutnID", accoutnID) :
                new ObjectParameter("AccoutnID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewTrans", accoutnIDParameter, nameParameter, amountParameter, categoryIDParameter, dateParameter);
        }
    
        public virtual int AddNewUser(string login, string password, string firstName, string lastName)
        {
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewUser", loginParameter, passwordParameter, firstNameParameter, lastNameParameter);
        }
    
        public virtual ObjectResult<Account> GetAccountByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Account>("GetAccountByID", iDParameter);
        }
    
        public virtual ObjectResult<Account> GetAccountByID(Nullable<int> iD, MergeOption mergeOption)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Account>("GetAccountByID", mergeOption, iDParameter);
        }
    
        public virtual ObjectResult<GetAllAccounts_Result> GetAllAccounts(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllAccounts_Result>("GetAllAccounts", userIDParameter);
        }
    
        public virtual ObjectResult<Category> GetAllCategories()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Category>("GetAllCategories");
        }
    
        public virtual ObjectResult<Category> GetAllCategories(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Category>("GetAllCategories", mergeOption);
        }
    
        public virtual ObjectResult<Category> GetallExpenceCats()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Category>("GetallExpenceCats");
        }
    
        public virtual ObjectResult<Category> GetallExpenceCats(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Category>("GetallExpenceCats", mergeOption);
        }
    
        public virtual ObjectResult<Category> GetAllIncomeCats()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Category>("GetAllIncomeCats");
        }
    
        public virtual ObjectResult<Category> GetAllIncomeCats(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Category>("GetAllIncomeCats", mergeOption);
        }
    
        public virtual ObjectResult<Category> GetAllMainCategories(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Category>("GetAllMainCategories", userIDParameter);
        }
    
        public virtual ObjectResult<Category> GetAllMainCategories(Nullable<int> userID, MergeOption mergeOption)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Category>("GetAllMainCategories", mergeOption, userIDParameter);
        }
    
        public virtual ObjectResult<Transaction> GetAllTransByCategory(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Transaction>("GetAllTransByCategory", iDParameter);
        }
    
        public virtual ObjectResult<Transaction> GetAllTransByCategory(Nullable<int> iD, MergeOption mergeOption)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Transaction>("GetAllTransByCategory", mergeOption, iDParameter);
        }
    
        public virtual ObjectResult<GetAllTransForAccountAndDate_Result> GetAllTransForAccountAndDate(Nullable<int> accountID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTransForAccountAndDate_Result>("GetAllTransForAccountAndDate", accountIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<Category> GetSubCategoriesByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Category>("GetSubCategoriesByID", iDParameter);
        }
    
        public virtual ObjectResult<Category> GetSubCategoriesByID(Nullable<int> iD, MergeOption mergeOption)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Category>("GetSubCategoriesByID", mergeOption, iDParameter);
        }
    
        public virtual ObjectResult<User> GetUser(string userName, string hashedPassword)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var hashedPasswordParameter = hashedPassword != null ?
                new ObjectParameter("hashedPassword", hashedPassword) :
                new ObjectParameter("hashedPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("GetUser", userNameParameter, hashedPasswordParameter);
        }
    
        public virtual ObjectResult<User> GetUser(string userName, string hashedPassword, MergeOption mergeOption)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var hashedPasswordParameter = hashedPassword != null ?
                new ObjectParameter("hashedPassword", hashedPassword) :
                new ObjectParameter("hashedPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("GetUser", mergeOption, userNameParameter, hashedPasswordParameter);
        }
    
        public virtual int RemoveAccountByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveAccountByID", iDParameter);
        }
    
        public virtual int RemoveCategoryByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveCategoryByID", iDParameter);
        }
    
        public virtual int RemoveTransByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveTransByID", iDParameter);
        }
    
        public virtual ObjectResult<SearchAccountByName_Result> SearchAccountByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchAccountByName_Result>("SearchAccountByName", nameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetUserIDByAccountID(Nullable<int> accountID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetUserIDByAccountID", accountIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> AddNewBank(Nullable<int> userID, string name)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddNewBank", userIDParameter, nameParameter);
        }
    
        public virtual ObjectResult<GetAllBanks1_Result> GetAllBanks(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllBanks1_Result>("GetAllBanks", userIDParameter);
        }
    
        public virtual int Transfer(Nullable<int> accountFrom, Nullable<int> accountTo, string name, Nullable<decimal> amount, Nullable<System.DateTime> date)
        {
            var accountFromParameter = accountFrom.HasValue ?
                new ObjectParameter("AccountFrom", accountFrom) :
                new ObjectParameter("AccountFrom", typeof(int));
    
            var accountToParameter = accountTo.HasValue ?
                new ObjectParameter("AccountTo", accountTo) :
                new ObjectParameter("AccountTo", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Transfer", accountFromParameter, accountToParameter, nameParameter, amountParameter, dateParameter);
        }
    }
}
